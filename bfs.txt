#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

// Function to perform parallel BFS
void parallelBFS(vector<vector<int>>& graph, int start) {
    int num_vertices = graph.size();
    vector<bool> visited(num_vertices, false);
    queue<int> q;

    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        cout << current << " "; // Print the visited node
        #pragma omp parallel for shared(graph, visited, q) // Parallelize the loop
        for (int i = 0; i < num_vertices; ++i) {
            if (graph[current][i] && !visited[i]) {
                #pragma omp critical
                {
                    visited[i] = true;
                    q.push(i);
                }
            }
        }
    }
}

int main() {
    vector<vector<int>> graph = {
        {0, 1, 1, 0, 0},
        {1, 0, 0, 1, 1},
        {1, 0, 0, 0, 1},
        {0, 1, 0, 0, 0},
        {0, 1, 1, 0, 0}
    };

    int start_node = 0;

    cout << "BFS traversal: ";
    parallelBFS(graph, start_node);
    cout << endl;

    return 0;
}

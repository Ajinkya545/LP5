#include <omp.h>
#include <iostream>
using namespace std;

int min(int arr[], int n) {
    int minval = arr[0];
    #pragma omp parallel for reduction(min: minval)
    for(int i = 0; i < n; i++) { // Fixed comma to semicolon
        if(arr[i] < minval) {
            minval = arr[i];
        }
    }
    return minval;
}

int max(int arr[], int n) {
    int maxval = arr[0];
    #pragma omp parallel for reduction(max: maxval)
    for(int i = 0; i < n; i++) {
        if(arr[i] > maxval) {
            maxval = arr[i];
        }
    }
    return maxval;
}

int sum(int arr[], int n) {
    int sumval = 0;
    #pragma omp parallel for reduction(+: sumval)
    for(int i = 0; i < n; i++) {
        sumval += arr[i];
    }
    return sumval;
}

double avg(int arr[], int n) {
    double sumval = sum(arr, n); // Calculate sum
    return sumval / n;
}

int main() {
    int n = 5;
    int arr[] = {1, 2, 3, 4, 5};

    cout << "Max value is:  " << max(arr, n) << endl;
    cout << "Min value is:  " << min(arr, n) << endl;
    cout << "Sum value is: " << sum(arr, n) << endl;
    cout << "Average value is: " << avg(arr, n) << endl;

    return 0;
}
